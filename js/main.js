var app;!function(e){var t;!function(e){var t=function(){function e(e,t,i,o){this.playArea=e,this.height=i,this.width=t,this.velocity=o,this.body=document.createElement("div"),this.body.style.right=-1*this.width+"px",this.body.style.width=this.width+"px",this.body.style.height=this.height+"px",this.body.style.bottom="0",this.body.className="enemy"}return e.prototype.release=function(e){var t=this;void 0===e&&(e=0),setTimeout(function(){t.playArea.appendChild(t.body),TweenLite.to(t.body,1*t.velocity,{right:"768px",onComplete:t.destroy.bind(t)})},1e3*e)},e.prototype.destroy=function(){TweenMax.killTweensOf(this.body),this.playArea.removeChild(this.body)},e}();e.Abstract=t}(t=e.game||(e.game={}))}(app||(app={}));var app;!function(e){var t;!function(e){var t=function(){function e(){}return e.detectCollition=function(e,t){return e.x<t.x+t.w&&e.x+e.w>t.x&&e.y<t.y+t.h&&e.h+e.y>t.y},e.debounce=function(e,t,i){var o;return function(){var n=this,a=arguments,l=function(){o=null,i||e.apply(n,a)},s=i&&!o;clearTimeout(o),o=setTimeout(l,t),s&&e.apply(n,a)}},e.throttle=function(e,t,i){void 0===t&&(t=250);var o,n;return function(){var a=i||this,l=+new Date,s=arguments;o&&o+t>l?(clearTimeout(n),n=setTimeout(function(){o=l,e.apply(a,s)},t)):(o=l,e.apply(a,s))}},e}();e.Utils=t}(t=e.game||(e.game={}))}(app||(app={}));var app;!function(e){var t;!function(t){var i=e.game.Utils,o=function(){function e(e,t){var o=this;this._isJumping=!1,this.shoot=i.throttle(function(){if(o.isDead)return void o.msgDead();var e=document.createElement("div");e.className="bullet",e.style.width="10px",e.style.height="10px",e.style.bottom=parseInt(o.body.style.bottom)+25+"px",o.playArea.appendChild(e),TweenLite.to(e,5.75,{right:-20,onComplete:function(){TweenMax.killTweensOf(e),o.playArea.removeChild(e)}}),console.log("shoot")},500),this.applyForce=i.throttle(function(){return o.isDead?void o.msgDead():(o.forceJump=o.forceJump<1?o.forceJump+.1:1,TweenMax.killTweensOf(o.body),void TweenMax.to(o.body,.25,{height:50-20*o.forceJump}))},1),this.jump=i.debounce(function(){return o.isJumping||o.isDead?void o.msgDead():(o.isJumping=!0,void TweenMax.to(o.body,2*o.forceJump,{height:"80px",bottom:420*o.forceJump,onComplete:function(){TweenMax.to(o.body,1.6*o.forceJump,{height:"50px",bottom:0,onComplete:function(){o.isJumping=!1,o.forceJump=0}})}}))},250),this.playArea=e,this.body=document.getElementById(t),this.body.style.bottom="0px",this.body.style.width="50px",this.body.style.height="50px",this.body.style.right="708px",this.forceJump=0,this.isDead=!1}return e.prototype.msgDead=function(){console.log("ESTAS MUERTO! No te puedes jugar mas!.")},e.prototype.dead=function(){this.isDead=!0,this.body.style.backgroundColor="black",console.log("YOU DIE!!!!")},Object.defineProperty(e.prototype,"isJumping",{get:function(){return this._isJumping},set:function(e){this._isJumping=e},enumerable:!0,configurable:!0}),e}();t.Player=o}(t=e.game||(e.game={}))}(app||(app={}));var app;!function(e){var t;!function(e){var t=function(){function t(e,t){this.player=t,this.playArea=e,this.start()}return t.prototype.start=function(){var t=this;setInterval(function(){var i={x:parseInt(t.player.body.style.right),y:parseInt(t.player.body.style.bottom),w:parseInt(t.player.body.style.width),h:parseInt(t.player.body.style.height),e:t.player.body},o=t.playArea.getElementsByClassName("enemy");if(o.length>0)for(var n=0;n<o.length;n++){var a=o[n],l={x:parseInt(a.style.right),y:parseInt(a.style.bottom),w:parseInt(a.style.width),h:parseInt(a.style.height),e:a};e.Utils.detectCollition(l,i)&&(console.log("POW!"),t.player.dead())}var s=t.playArea.getElementsByClassName("obstacle");if(s.length>0)for(var n=0;n<s.length;n++){var r=s[n],l={x:parseInt(r.style.right),y:parseInt(r.style.bottom),w:parseInt(r.style.width),h:parseInt(r.style.height),e:r};!t.player.isDead&&e.Utils.detectCollition(l,i)&&(console.log("PAM!"),t.player.dead());var p=t.playArea.getElementsByClassName("bullet");if(p.length>0)for(var n=0;n<p.length;n++){var h=p[n],y={x:parseInt(h.style.right),y:parseInt(h.style.bottom),w:parseInt(h.style.width),h:parseInt(h.style.height),e:h};e.Utils.detectCollition(l,y)&&(console.log("CRASH!"),TweenMax.killTweensOf(l.e),t.playArea.removeChild(l.e),TweenMax.killTweensOf(y.e),t.playArea.removeChild(y.e))}}},1)},t}();e.Ticker=t}(t=e.game||(e.game={}))}(app||(app={}));var __extends=this&&this.__extends||function(e,t){function i(){this.constructor=e}for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o]);e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)},app;!function(e){var t;!function(t){var i=function(e){function t(t,i,o,n){void 0===i&&(i=10),void 0===o&&(o=10),void 0===n&&(n=.5),e.call(this,t,i,o,n),this.body.style.bottom="0",this.body.className="enemy"}return __extends(t,e),t}(e.game.Abstract);t.Enemy=i}(t=e.game||(e.game={}))}(app||(app={}));var __extends=this&&this.__extends||function(e,t){function i(){this.constructor=e}for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o]);e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)},app;!function(e){var t;!function(t){var i=function(e){function t(t,i,o,n){void 0===i&&(i=10),void 0===o&&(o=10),void 0===n&&(n=.5),e.call(this,t,i,o,n),this.body.style.bottom=500-this.height+"px",this.body.className="obstacle"}return __extends(t,e),t}(e.game.Abstract);t.Obstacle=i}(t=e.game||(e.game={}))}(app||(app={}));var levels=[[{type:"obstacle",time:.2,width:10,height:500,velocity:5},{type:"obstacle",time:3,width:10,height:400,velocity:5},{type:"obstacle",time:6,width:10,height:120,velocity:5}],[{type:"enemy",time:.2,width:10,height:300,velocity:5},{type:"obstacle",time:2,width:10,height:100,velocity:3},{type:"obstacle",time:5,width:20,height:430,velocity:4}],[{type:"obstacle",time:.2,width:10,height:200,velocity:5},{type:"enemy",time:.2,width:10,height:200,velocity:5},{type:"obstacle",time:5.2,width:10,height:350,velocity:5},{type:"enemy",time:5.2,width:10,height:100,velocity:5}]],app;!function(e){var t;!function(t){var i=e.game.Enemy,o=e.game.Obstacle,n=function(){function e(e){this.playArea=e}return e.prototype.load=function(e){if(void 0===e&&(e=0),console.log("Load LVL -> ",e),1>e||e>levels.length)return!1;e-=1;for(var t=0;t<levels[e].length;t++){var n,a=levels[e][t];switch(a.type){case"enemy":n=new i(this.playArea,a.width,a.height,a.velocity);break;case"obstacle":n=new o(this.playArea,a.width,a.height,a.velocity)}n.release(a.time)}return!0},e}();t.LevelSelector=n}(t=e.game||(e.game={}))}(app||(app={}));var app;!function(e){var t;!function(t){var i=e.game.Player,o=e.game.Ticker,n=e.game.LevelSelector,a=function(){function e(){this.btPlay=document.getElementById("js-bt-play"),this.btReload=document.getElementById("js-bt-reload"),this.playArea=document.getElementById("js-canvas"),this.player=new i(this.playArea,"js-player"),this.ticker=new o(this.playArea,this.player),this.levelSelector=new n(this.playArea),this.isPlaying=!1}return e.prototype.start=function(){this.bindings()},e.prototype.bindings=function(){var e=this;this.btPlay.onclick=this.play.bind(this),this.btReload.onclick=this.reload.bind(this),document.body.onkeydown=function(t){switch(t.preventDefault(),t.which){case 74:e.player.isJumping||e.player.applyForce();break;case 70:e.player.shoot();break;default:return}},document.body.onkeyup=function(t){t.preventDefault(),74==t.which&&e.player.jump()}},e.prototype.reload=function(){location.reload()},e.prototype.play=function(){this.releaseLevels()},e.prototype.releaseLevels=function(){var e=this;this.isPlaying||(this.isPlaying=!0,setTimeout(function(){e.levelSelector.load(1)},100),setTimeout(function(){e.levelSelector.load(2)},12e3),setTimeout(function(){e.levelSelector.load(3)},2e4))},e}();t.App=a}(t=e.game||(e.game={}))}(app||(app={}));var App=app.game.App,walkAloneApp;!function(){walkAloneApp=new App,walkAloneApp.start()}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
